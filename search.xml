<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>go_study</title>
      <link href="/2019/04/08/go-study/"/>
      <url>/2019/04/08/go-study/</url>
      
        <content type="html"><![CDATA[<p>golang的基本使用<br><a id="more"></a></p><h1 id="go基础"><a href="#go基础" class="headerlink" title="go基础"></a>go基础</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">  &quot;fmt&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">  fmt.Println(&quot;hello, world!&quot;)</span><br><span class="line">&#125;</span><br><span class="line">------------------</span><br><span class="line">go run hello.go</span><br><span class="line">hello, world!</span><br></pre></td></tr></table></figure><h2 id="包"><a href="#包" class="headerlink" title="包"></a>包</h2><p>package <packagename> 表示当前文件属于哪个包。包名为”main”时，表示是一个可以独立运行的包</packagename></p><p>除了main包之外，其他的包最后都会生成.a文件（也就是包文件），并放置在$GOPATH/pkg/$GOOS_$GOARCH中</p><p>一个可以独立运行的包，必定包含package main，在这个main包中必定包含一个入口函数main，而这个函数既没有参数，也没有返回值。</p><h2 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量"></a>定义变量</h2><ol><li><p>定义一个变量</p><blockquote><p>var variablename type</p></blockquote></li><li><p>定义多个变量</p><blockquote><p>var variablename1, variablename2, variablename3 typ</p></blockquote></li><li><p>定义变量并初始化</p><blockquote><p>var variablename type = value</p></blockquote></li><li><p>同时初始化多个变量</p><blockquote><p>var vname1, vname2, vname3 type = v1, v2, v3</p></blockquote></li><li><p>忽略变量类型（go会根据相应的类型初始化变量)</p><blockquote><p>var vname1, vname2, vname3 = v1, v2, v3</p></blockquote></li><li><p>简短声明（只能用在函数内部）</p><blockquote><p>vname1, vname2, vname3 := v1, v2, v3</p></blockquote></li></ol><p><strong>_（下划线）是个特殊变量名，任何赋予给它的值，都会被舍弃</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_, y := 1, 2</span><br></pre></td></tr></table></figure></p><p><strong>对于申明但未使用的变量，在编译的时候会报错</strong></p><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><blockquote><p>const var variablename type = value</p></blockquote><p><strong>在编译阶段就已经确认（声明时就必须初始化），运行时无法修改。</strong></p><h2 id="内置基础类型"><a href="#内置基础类型" class="headerlink" title="内置基础类型"></a>内置基础类型</h2><h3 id="bool"><a href="#bool" class="headerlink" title="bool"></a>bool</h3><blockquote><p>值为true或false，默认false</p></blockquote><h3 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h3><h4 id="整数类型"><a href="#整数类型" class="headerlink" title="整数类型"></a>整数类型</h4><ul><li>int8</li><li>int16</li><li>int32(rune 是int32的别称)</li><li>int64</li><li>uint8(byte 是uint8的别称)</li><li>uint16</li><li>uint32</li><li>uint64</li><li>int</li><li>uint</li></ul><p><strong>不同类型变量之间不允许互相赋值或操作，否则编译时会报错</strong></p><h4 id="浮点数类型-默认是float64"><a href="#浮点数类型-默认是float64" class="headerlink" title="浮点数类型(默认是float64)"></a>浮点数类型(默认是float64)</h4><ul><li>float32</li><li>float64<h4 id="复数类型"><a href="#复数类型" class="headerlink" title="复数类型"></a>复数类型</h4></li><li>complex64(32位实数 + 32位虚数)</li><li>complex128(64位实数 + 64位虚数)</li></ul><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p><strong>字符串都是采用utf-8字符集编码，字符串不可变</strong><br>-. 双引号<br>-. 反引号(原生字符串，不会字符转义)</p><h4 id="修改字符串"><a href="#修改字符串" class="headerlink" title="修改字符串"></a>修改字符串</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">s := &quot;hello&quot;</span><br><span class="line">c := []byte(s)    //将字符串转换成[]byte类型</span><br><span class="line">c[0] = &apos;c&apos;</span><br><span class="line">s2 := string(c)   //再将[]byte类型转换成string类型</span><br><span class="line">------或--------</span><br><span class="line">s = &quot;c&quot; + s[1:]</span><br></pre></td></tr></table></figure><h4 id="连接字符串"><a href="#连接字符串" class="headerlink" title="连接字符串"></a>连接字符串</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s := &quot;hello&quot;</span><br><span class="line">m := &quot;world&quot;</span><br><span class="line">a := s + m</span><br></pre></td></tr></table></figure><h4 id="声明多行字符串"><a href="#声明多行字符串" class="headerlink" title="声明多行字符串"></a>声明多行字符串</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">m := `hello</span><br><span class="line">world`</span><br></pre></td></tr></table></figure><h3 id="错误类型"><a href="#错误类型" class="headerlink" title="错误类型"></a>错误类型</h3><ul><li>error类型，转码处理错误信息</li></ul><h1 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h1><h2 id="分组声明"><a href="#分组声明" class="headerlink" title="分组声明"></a>分组声明</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">import &quot;fmt&quot;</span><br><span class="line">import &quot;os&quot;</span><br><span class="line"></span><br><span class="line">const i = 100</span><br><span class="line">const pi = 3.1415</span><br><span class="line">const prefix = &quot;Go_&quot;</span><br><span class="line"></span><br><span class="line">var i int</span><br><span class="line">var pi float32</span><br><span class="line">var prefix string</span><br><span class="line">------------</span><br><span class="line">import (&quot;fmt&quot;, &quot;os&quot;)</span><br><span class="line"></span><br><span class="line">const (</span><br><span class="line">    i = 100</span><br><span class="line">    pi = 3.14159</span><br><span class="line">    prefix = &quot;Go_&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">var(</span><br><span class="line">    i int</span><br><span class="line">    pi  float32</span><br><span class="line">    prefix string</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="itoa枚举"><a href="#itoa枚举" class="headerlink" title="itoa枚举"></a>itoa枚举</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const(</span><br><span class="line">    x = itoa  //x == 0</span><br><span class="line">    y         //y == 1</span><br><span class="line">    z = itoa  //z == 2</span><br><span class="line">    w         //w == 3</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">const v = itoa  //每遇到一个construction关键字，itoa会重置为0</span><br></pre></td></tr></table></figure><h2 id="默认规则"><a href="#默认规则" class="headerlink" title="默认规则"></a>默认规则</h2><ul><li>大写字母开头的变量是可导出的（公用变量）；小写字母开头的变量不可导出（私有变量）</li><li>大写字母开头的函数是可导出的（共有函数）；小写字母开头的变量不可导出（私有函数）</li></ul><h2 id="内建类型"><a href="#内建类型" class="headerlink" title="内建类型"></a>内建类型</h2><h3 id="array数组"><a href="#array数组" class="headerlink" title="array数组"></a>array数组</h3><blockquote><p>var arr [n]type</p></blockquote><p><strong>数组不能改变长度，数组之间赋值是值赋值</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var arr[10] int</span><br><span class="line">arr[0] = 1</span><br><span class="line">arr[1] = 2</span><br><span class="line"></span><br><span class="line">a := [3]int&#123;1,2,3&#125;  //声明长度为3的int数组，初始化为1，2，3</span><br><span class="line">b := [10]int&#123;1,2,3&#125; //声明长度为3的int数组，前三个元素初始化为1，2，3，其他默认为0</span><br><span class="line">c := [...]int&#123;4,5,6&#125;//省略长度而采用`...`的方式，Go会自动根据元素的个数计算长度</span><br></pre></td></tr></table></figure></p><h3 id="slice"><a href="#slice" class="headerlink" title="slice"></a>slice</h3><blockquote><p>var arr []type</p></blockquote><p><strong>slice声明时不需要长度，可以从数组或已存在的slice中再次声明</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var fslice[] byte</span><br><span class="line">arr := []byte &#123;&apos;a&apos;, &apos;b&apos;, &apos;c&apos;&#125;</span><br><span class="line">var a []byte</span><br><span class="line">a = arr[:2] //a = arr[1:2]</span><br></pre></td></tr></table></figure></p><p><strong>arr[i,j] 是指下标[i, j)的元素切片，默认起始位置为0，默认终止位置为最后一个元素</strong></p><h4 id="常用的内置函数"><a href="#常用的内置函数" class="headerlink" title="常用的内置函数"></a>常用的内置函数</h4><ul><li>len获取slice的长度</li><li>cap获取slice的最大容量</li><li>append向slice里面追加一个或多个元素，返回slice</li><li>copy从源slice的src中复制元素到目标dst，并且返回复制的元素的个数</li></ul><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><blockquote><p>var var_name map[key_type] value_type</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var numbers map[string] int</span><br><span class="line">numbers := make(map[string] int)</span><br></pre></td></tr></table></figure><ul><li>map是无序的</li><li>map长度不固定</li></ul><h2 id="make"><a href="#make" class="headerlink" title="make"></a>make</h2><blockquote><p>用于内建类型的内存分配</p></blockquote><p><strong>返回一个有初始值（非零）的类型</strong></p><h2 id="new"><a href="#new" class="headerlink" title="new"></a>new</h2><blockquote><p>用于各种类型的内存分配</p></blockquote><p><strong>返回指针</strong></p><h1 id="流程和函数"><a href="#流程和函数" class="headerlink" title="流程和函数"></a>流程和函数</h1><h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><h3 id="if-else"><a href="#if-else" class="headerlink" title="if-else"></a>if-else</h3><blockquote><p>判断语句不需要括号， 条件判断语句允许声明变量，但变量的作用域只能在该条件逻辑块内**</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">if x &gt; 10 &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125; else &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if x := value; x &gt; 10 &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125; else if x &gt; 5 &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125; else &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="goto"><a href="#goto" class="headerlink" title="goto"></a>goto</h3><blockquote><p>跳转到标签（当前函数内定义的标签），标签名大小写敏感</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">func test() &#123;</span><br><span class="line">  i := 0</span><br><span class="line">Here:</span><br><span class="line">  i++</span><br><span class="line">  goto Here</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="for"><a href="#for" class="headerlink" title="for"></a>for</h3><blockquote><p>循环控制</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">for exp1; exp2; exp3 &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line">---以下类似于while---</span><br><span class="line">for i &lt; 10 &#123;</span><br><span class="line">  i += 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="break"><a href="#break" class="headerlink" title="break"></a>break</h4><blockquote><p>跳出当前循环</p></blockquote><ul><li>配合标签使用时，跳转到标签位置</li><li>后面跟着标号，表示跳过多次外循环</li></ul><h4 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h4><blockquote><p>跳过当前循环</p></blockquote><ul><li>后面跟着标号，表示跳过多次循环</li></ul><h3 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h3><blockquote><p>和if-else左右相同</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">switch exp &#123;</span><br><span class="line">case exp1:</span><br><span class="line">  ...</span><br><span class="line">case exp2, exp3:</span><br><span class="line">  ...</span><br><span class="line">case exp4:</span><br><span class="line">  ...</span><br><span class="line">default:</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>exp和exp1, exp2, exp3, exp4类型必须一致</li><li>switch默认每个case带有break，匹配成功后，跳出整个switch</li><li>使用fallthrough，强制执行后面的case代码</li></ul><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">func funcName(input1 type1, input2 type2) (output1 type1, output2 type2) &#123;</span><br><span class="line">  ...</span><br><span class="line">  return v1, v2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>可以有多个参数</li><li>返回值可以不声明，但必须保留类型</li><li>只有一个返回值， 可以省略“包含返回值”的括号</li><li>没有返回值，可以省略返回信息</li><li>有返回值，必须在最外层添加return语句</li></ul><h3 id="变参"><a href="#变参" class="headerlink" title="变参"></a>变参</h3><blockquote><p>有不定数量的参数</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">func myfunc(arg ... int)&#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="传值与传指针"><a href="#传值与传指针" class="headerlink" title="传值与传指针"></a>传值与传指针</h3><blockquote><p>传指针时，需要将类型改成 *type</p></blockquote><ul><li>传指针可以使多个函数操作同一个对象</li><li>传指针只是传内存地址，节省系统开销</li><li>string，slice，map可以直接传递，不用取地址后传递指针；若需要改变slice的长度，仍需要取地址传递指针</li></ul><h3 id="defer"><a href="#defer" class="headerlink" title="defer"></a>defer</h3><blockquote><p>延迟语句，当函数执行到最后时，defer语句会逆序执行，最后该函数返回</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">func readwrite() bool &#123;</span><br><span class="line">  file.Open(&quot;file&quot;)</span><br><span class="line">  defer file.Close()</span><br><span class="line">  if readfail &#123;</span><br><span class="line">    return false</span><br><span class="line">  &#125;</span><br><span class="line">  if writefail &#123;</span><br><span class="line">    return false</span><br><span class="line">  &#125;</span><br><span class="line">  return true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数作为值，类型"><a href="#函数作为值，类型" class="headerlink" title="函数作为值，类型"></a>函数作为值，类型</h3><h2 id="Panic和Recover"><a href="#Panic和Recover" class="headerlink" title="Panic和Recover"></a>Panic和Recover</h2><h3 id="Panic"><a href="#Panic" class="headerlink" title="Panic"></a>Panic</h3><h3 id="Recover"><a href="#Recover" class="headerlink" title="Recover"></a>Recover</h3><h2 id="main函数和init函数"><a href="#main函数和init函数" class="headerlink" title="main函数和init函数"></a>main函数和init函数</h2><ul><li>main函数只能运用于package main</li><li>main和init定义时，不能有任何的参数和返回值</li><li>Go语言程序会自动调用init()和main()</li></ul><h2 id="import"><a href="#import" class="headerlink" title="import"></a>import</h2><blockquote><p>导入包文件，支持相对路径和绝对路径</p></blockquote><h3 id="特殊操作"><a href="#特殊操作" class="headerlink" title="特殊操作"></a>特殊操作</h3><ol><li>点操作<blockquote><p>在包导入之后，调用包的函数时，可以省略前缀的包名</p></blockquote></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import (</span><br><span class="line">  . &quot;fmt&quot;</span><br><span class="line">)</span><br><span class="line">Println(&quot;hello, go!&quot;)</span><br></pre></td></tr></table></figure><ol start="2"><li>别名操作<blockquote><p>给包取别名；调用函数时，前缀变成别名</p></blockquote></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import (</span><br><span class="line">  f &quot;fmt&quot;</span><br><span class="line">)</span><br><span class="line">f.Println(&quot;hello, go!&quot;)</span><br></pre></td></tr></table></figure><ol start="3"><li>_操作<blockquote><p>引入包，不直接使用包里面的函数，调用包的init函数</p></blockquote></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import (</span><br><span class="line">  _ &quot;fmt&quot;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="struct"><a href="#struct" class="headerlink" title="struct"></a>struct</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">type person struct &#123;</span><br><span class="line">  name string</span><br><span class="line">  age int</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var P person</span><br><span class="line">p.name = &quot;test&quot;</span><br><span class="line">p.age = 100</span><br><span class="line">------按照顺序提供初始化值----</span><br><span class="line">P := person&#123;&quot;test&quot;, 100&#125;</span><br><span class="line">----通过field:value的方式初始化(可以任意顺序)-------</span><br><span class="line">P := person&#123;age:100, name:&quot;test&quot;&#125;</span><br></pre></td></tr></table></figure><h3 id="匿名-嵌入字段"><a href="#匿名-嵌入字段" class="headerlink" title="匿名/嵌入字段"></a>匿名/嵌入字段</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">type Human struct &#123;</span><br><span class="line">  name string</span><br><span class="line">  age int</span><br><span class="line">  weight int</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type Student struct &#123;</span><br><span class="line">  Human //匿名字段，默认Student包含了Human的所有字段</span><br><span class="line">  speciality string</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><h3 id="method"><a href="#method" class="headerlink" title="method"></a>method</h3><blockquote><p>func (r ReceiverType) funcName(parameters) (resultd)</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line">import (</span><br><span class="line">  &quot;fmt&quot;</span><br><span class="line">  &quot;math&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">type Rectangle struct &#123;</span><br><span class="line">  with, height float64</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">type Circle struct &#123;</span><br><span class="line">  radius float64</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (r Rectangle) area() float64 &#123;</span><br><span class="line">  return r.width*r.height</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (c Circle) area() float64 &#123;</span><br><span class="line">  return c.radius*c.radius*math.Pi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">  r1 := Rectangle(12,2)</span><br><span class="line">  r2 := Rectangle(9,4)</span><br><span class="line">  c1 := Circle(10)</span><br><span class="line">  c2 := Circle(25)</span><br><span class="line"></span><br><span class="line">  fmt.Println(&quot;Area of r1 is:&quot;, r1.area())</span><br><span class="line">  fmt.Println(&quot;Area of r2 is:&quot;, r2.area())</span><br><span class="line">  fmt.Println(&quot;Area of c1 is:&quot;, c1.area())</span><br><span class="line">  fmt.Println(&quot;Area of c2 is:&quot;, c2.area())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="interface"><a href="#interface" class="headerlink" title="interface"></a>interface</h2><h2 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h2><h3 id="goroutine"><a href="#goroutine" class="headerlink" title="goroutine"></a>goroutine</h3><blockquote><p>go func(prarams)</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import &#123;</span><br><span class="line">  &quot;fmt&quot;,</span><br><span class="line">  &quot;runtime&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func say(s string) &#123;</span><br><span class="line">  for i := 0; i &lt; 5; i++ &#123;</span><br><span class="line">    runtime.Gosched()//让CPU把时间片让给别人，下次某个时候继续恢复执行goroutine</span><br><span class="line">    fmt.Println(s)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">  go say(&quot;world&quot;)</span><br><span class="line">  say(&quot;hello&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="channels"><a href="#channels" class="headerlink" title="channels"></a>channels</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/04/03/hello-world/"/>
      <url>/2019/04/03/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>My New Post</title>
      <link href="/2019/03/20/My-New-Post/"/>
      <url>/2019/03/20/My-New-Post/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> what </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
