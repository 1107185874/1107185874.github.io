{"meta":{"title":"My Blog","subtitle":null,"description":null,"author":"John Doe","url":"http://yoursite.com","root":"/"},"pages":[{"title":"","date":"2019-04-03T15:24:27.859Z","updated":"2019-04-02T14:17:46.290Z","comments":true,"path":"404.html","permalink":"http://yoursite.com/404.html","excerpt":"","text":"404 Not Found **很抱歉，您访问的页面不存在** 可能是输入地址有误或该地址已被删除"},{"title":"我的朋友们","date":"2019-04-02T14:17:23.152Z","updated":"2019-04-02T14:17:23.152Z","comments":true,"path":"friends/index.html","permalink":"http://yoursite.com/friends/index.html","excerpt":"","text":"这里可以写友链页面下方的文字备注，例如自己的友链规范、示例等。"},{"title":"所有标签","date":"2019-04-02T14:16:36.400Z","updated":"2019-04-02T14:16:36.400Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""},{"title":"所有分类","date":"2019-04-02T14:16:04.334Z","updated":"2019-04-02T14:16:04.334Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"go_study","slug":"go-study","date":"2019-04-08T15:53:33.000Z","updated":"2019-04-16T12:12:27.945Z","comments":true,"path":"2019/04/08/go-study/","link":"","permalink":"http://yoursite.com/2019/04/08/go-study/","excerpt":"golang的基本使用","text":"golang的基本使用 go基础123456789101112package mainimport ( &quot;fmt&quot;)func main() &#123; fmt.Println(&quot;hello, world!&quot;)&#125;------------------go run hello.gohello, world! 包package 表示当前文件属于哪个包。包名为”main”时，表示是一个可以独立运行的包 除了main包之外，其他的包最后都会生成.a文件（也就是包文件），并放置在$GOPATH/pkg/$GOOS_$GOARCH中 一个可以独立运行的包，必定包含package main，在这个main包中必定包含一个入口函数main，而这个函数既没有参数，也没有返回值。 定义变量 定义一个变量 var variablename type 定义多个变量 var variablename1, variablename2, variablename3 typ 定义变量并初始化 var variablename type = value 同时初始化多个变量 var vname1, vname2, vname3 type = v1, v2, v3 忽略变量类型（go会根据相应的类型初始化变量) var vname1, vname2, vname3 = v1, v2, v3 简短声明（只能用在函数内部） vname1, vname2, vname3 := v1, v2, v3 _（下划线）是个特殊变量名，任何赋予给它的值，都会被舍弃1_, y := 1, 2 对于申明但未使用的变量，在编译的时候会报错 常量 const var variablename type = value 在编译阶段就已经确认（声明时就必须初始化），运行时无法修改。 内置基础类型bool 值为true或false，默认false 数值类型整数类型 int8 int16 int32(rune 是int32的别称) int64 uint8(byte 是uint8的别称) uint16 uint32 uint64 int uint 不同类型变量之间不允许互相赋值或操作，否则编译时会报错 浮点数类型(默认是float64) float32 float64复数类型 complex64(32位实数 + 32位虚数) complex128(64位实数 + 64位虚数) 字符串字符串都是采用utf-8字符集编码，字符串不可变-. 双引号-. 反引号(原生字符串，不会字符转义) 修改字符串123456s := &quot;hello&quot;c := []byte(s) //将字符串转换成[]byte类型c[0] = &apos;c&apos;s2 := string(c) //再将[]byte类型转换成string类型------或--------s = &quot;c&quot; + s[1:] 连接字符串123s := &quot;hello&quot;m := &quot;world&quot;a := s + m 声明多行字符串12m := `helloworld` 错误类型 error类型，转码处理错误信息 技巧分组声明123456789101112131415161718192021222324import &quot;fmt&quot;import &quot;os&quot;const i = 100const pi = 3.1415const prefix = &quot;Go_&quot;var i intvar pi float32var prefix string------------import (&quot;fmt&quot;, &quot;os&quot;)const ( i = 100 pi = 3.14159 prefix = &quot;Go_&quot;)var( i int pi float32 prefix string) itoa枚举12345678const( x = itoa //x == 0 y //y == 1 z = itoa //z == 2 w //w == 3)const v = itoa //每遇到一个construction关键字，itoa会重置为0 默认规则 大写字母开头的变量是可导出的（公用变量）；小写字母开头的变量不可导出（私有变量） 大写字母开头的函数是可导出的（共有函数）；小写字母开头的变量不可导出（私有函数） 内建类型array数组 var arr [n]type 数组不能改变长度，数组之间赋值是值赋值1234567var arr[10] intarr[0] = 1arr[1] = 2a := [3]int&#123;1,2,3&#125; //声明长度为3的int数组，初始化为1，2，3b := [10]int&#123;1,2,3&#125; //声明长度为3的int数组，前三个元素初始化为1，2，3，其他默认为0c := [...]int&#123;4,5,6&#125;//省略长度而采用`...`的方式，Go会自动根据元素的个数计算长度 slice var arr []type slice声明时不需要长度，可以从数组或已存在的slice中再次声明1234var fslice[] bytearr := []byte &#123;&apos;a&apos;, &apos;b&apos;, &apos;c&apos;&#125;var a []bytea = arr[:2] //a = arr[1:2] arr[i,j] 是指下标[i, j)的元素切片，默认起始位置为0，默认终止位置为最后一个元素 常用的内置函数 len获取slice的长度 cap获取slice的最大容量 append向slice里面追加一个或多个元素，返回slice copy从源slice的src中复制元素到目标dst，并且返回复制的元素的个数 map var var_name map[key_type] value_type 12var numbers map[string] intnumbers := make(map[string] int) map是无序的 map长度不固定 make 用于内建类型的内存分配 返回一个有初始值（非零）的类型 new 用于各种类型的内存分配 返回指针 流程和函数流程控制if-else 判断语句不需要括号， 条件判断语句允许声明变量，但变量的作用域只能在该条件逻辑块内** 12345678910111213if x &gt; 10 &#123; ...&#125; else &#123; ...&#125;if x := value; x &gt; 10 &#123; ...&#125; else if x &gt; 5 &#123; ...&#125; else &#123; ...&#125; goto 跳转到标签（当前函数内定义的标签），标签名大小写敏感 123456func test() &#123; i := 0Here: i++ goto Here&#125; for 循环控制 1234567for exp1; exp2; exp3 &#123; ...&#125;---以下类似于while---for i &lt; 10 &#123; i += 1&#125; break 跳出当前循环 配合标签使用时，跳转到标签位置 后面跟着标号，表示跳过多次外循环 continue 跳过当前循环 后面跟着标号，表示跳过多次循环 switch 和if-else左右相同 12345678910switch exp &#123;case exp1: ...case exp2, exp3: ...case exp4: ...default: ...&#125; exp和exp1, exp2, exp3, exp4类型必须一致 switch默认每个case带有break，匹配成功后，跳出整个switch 使用fallthrough，强制执行后面的case代码 函数1234func funcName(input1 type1, input2 type2) (output1 type1, output2 type2) &#123; ... return v1, v2&#125; 可以有多个参数 返回值可以不声明，但必须保留类型 只有一个返回值， 可以省略“包含返回值”的括号 没有返回值，可以省略返回信息 有返回值，必须在最外层添加return语句 变参 有不定数量的参数 1func myfunc(arg ... int)&#123;&#125; 传值与传指针 传指针时，需要将类型改成 *type 传指针可以使多个函数操作同一个对象 传指针只是传内存地址，节省系统开销 string，slice，map可以直接传递，不用取地址后传递指针；若需要改变slice的长度，仍需要取地址传递指针 defer 延迟语句，当函数执行到最后时，defer语句会逆序执行，最后该函数返回 1234567891011func readwrite() bool &#123; file.Open(&quot;file&quot;) defer file.Close() if readfail &#123; return false &#125; if writefail &#123; return false &#125; return true&#125; 函数作为值，类型Panic和RecoverPanicRecovermain函数和init函数 main函数只能运用于package main main和init定义时，不能有任何的参数和返回值 Go语言程序会自动调用init()和main() import 导入包文件，支持相对路径和绝对路径 特殊操作 点操作 在包导入之后，调用包的函数时，可以省略前缀的包名 1234import ( . &quot;fmt&quot;)Println(&quot;hello, go!&quot;) 别名操作 给包取别名；调用函数时，前缀变成别名 1234import ( f &quot;fmt&quot;)f.Println(&quot;hello, go!&quot;) _操作 引入包，不直接使用包里面的函数，调用包的init函数 123import ( _ &quot;fmt&quot;) struct123456789101112type person struct &#123; name string age int&#125;var P personp.name = &quot;test&quot;p.age = 100------按照顺序提供初始化值----P := person&#123;&quot;test&quot;, 100&#125;----通过field:value的方式初始化(可以任意顺序)-------P := person&#123;age:100, name:&quot;test&quot;&#125; 匿名/嵌入字段12345678910type Human struct &#123; name string age int weight int&#125;type Student struct &#123; Human //匿名字段，默认Student包含了Human的所有字段 speciality string&#125; 面向对象method func (r ReceiverType) funcName(parameters) (resultd) 123456789101112131415161718192021222324252627282930313233package mainimport ( &quot;fmt&quot; &quot;math&quot;)type Rectangle struct &#123; with, height float64&#125;type Circle struct &#123; radius float64&#125;func (r Rectangle) area() float64 &#123; return r.width*r.height&#125;func (c Circle) area() float64 &#123; return c.radius*c.radius*math.Pi&#125;func main() &#123; r1 := Rectangle(12,2) r2 := Rectangle(9,4) c1 := Circle(10) c2 := Circle(25) fmt.Println(&quot;Area of r1 is:&quot;, r1.area()) fmt.Println(&quot;Area of r2 is:&quot;, r2.area()) fmt.Println(&quot;Area of c1 is:&quot;, c1.area()) fmt.Println(&quot;Area of c2 is:&quot;, c2.area())&#125; interface并发goroutine go func(prarams) 123456789101112131415161718package mainimport &#123; &quot;fmt&quot;, &quot;runtime&quot;&#125;func say(s string) &#123; for i := 0; i &lt; 5; i++ &#123; runtime.Gosched()//让CPU把时间片让给别人，下次某个时候继续恢复执行goroutine fmt.Println(s) &#125;&#125;func main() &#123; go say(&quot;world&quot;) say(&quot;hello&quot;)&#125; channels","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2019-04-03T09:43:10.411Z","updated":"2019-04-03T09:43:10.412Z","comments":true,"path":"2019/04/03/hello-world/","link":"","permalink":"http://yoursite.com/2019/04/03/hello-world/","excerpt":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[{"name":"教程","slug":"教程","permalink":"http://yoursite.com/categories/教程/"}],"tags":[]},{"title":"My New Post","slug":"My-New-Post","date":"2019-03-20T15:12:51.000Z","updated":"2019-04-02T14:56:51.298Z","comments":true,"path":"2019/03/20/My-New-Post/","link":"","permalink":"http://yoursite.com/2019/03/20/My-New-Post/","excerpt":"","text":"","categories":[{"name":"教程","slug":"教程","permalink":"http://yoursite.com/categories/教程/"}],"tags":[{"name":"what","slug":"what","permalink":"http://yoursite.com/tags/what/"}]}]}